# -*- coding: utf-8 -*-
"""MediGuard Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zeR0GF6eA5Pr31r2xtpf5kBvCu1lZtC-
"""

!pip install category_encoders

!pip install pyod

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

import category_encoders as ce
from sklearn.preprocessing import StandardScaler
from pyod.models.auto_encoder import AutoEncoder
#filter warnings
import warnings

warnings.filterwarnings("ignore")

pd.set_option("display.max_rows",None)
pd.set_option("display.max_columns",None)

def preprocessing(data):

  # remove unnecessary columns
  drop_cols = ['index', 'National Provider Identifier', 'Last Name/Organization Name of the Provider',
      'First Name of the Provider', 'Middle Initial of the Provider','Street Address 1 of the Provider',
      'Street Address 2 of the Provider','Zip Code of the Provider',"HCPCS Code"]

  data = data.drop(drop_cols, axis = 1)

  # clean the data, make it look nicer
  cleanse = ["Average Medicare Allowed Amount", "Average Submitted Charge Amount", "Average Medicare Payment Amount", "Average Medicare Standardized Amount"]

  for col in cleanse:
    data[col] = pd.to_numeric(data[col].apply(lambda x : removeComma(str(x))), errors="ignore")

  missing_cols = ['Credentials of the Provider', 'Gender of the Provider']
  # replaces null or missing values with the first mode found
  for col in missing_cols:
    data[col] = data[col].fillna(data[col].mode()[0])

  # binary encoding
  # binary value of a categorical datatype is split into columns
  be_cols = [var for var in data.columns if data[var].dtype == "O"]

  # removes the original column and instead adds the binary encodded columns
  for col in be_cols:
    encoder = ce.BinaryEncoder(cols = [col])
    databin = encoder.fit_transform(data[col])
    data = pd.concat([data, databin], axis = 1)
    del data[col]

  # standardization
  data_cols = data.columns
  std = StandardScaler()
  data = std.fit_transform(data)
  data = pd.DataFrame(data, columns = data_cols)

  return data

def removeComma(x):
  return x.replace(",", "")

data = pd.read_csv("Healthcare Providers.csv")

data = preprocessing(data)

from tensorflow.keras.models import Sequential
from tensorflow.keras import layers
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Model

import tensorflow as tf

class AnomalyDetector(Model):
  def __init__(self):
    super(AnomalyDetector, self).__init__()
    self.encoder = tf.keras.Sequential([
      layers.Dense(32, activation="relu"),
      layers.Dropout(0.1),
      layers.Dense(16, activation="relu"),
      layers.Dropout(0.2),
      layers.Dense(8, activation="relu")])

    self.decoder = tf.keras.Sequential([
      layers.Dense(16, activation="relu"),
      layers.Dropout(0.1),
      layers.Dense(32, activation="relu"),
      layers.Dropout(0.2),
      layers.Dense(100, activation="sigmoid")])

  def call(self, x):
    encoded = self.encoder(x)
    decoded = self.decoder(encoded)
    return decoded

ae = AnomalyDetector()

ae.compile(optimizer='adam',loss='mae')
history = ae.fit(data, data, epochs=25, batch_size=512, verbose=1)

ae.save("path_to_saved_model", save_format="tf")

!zip -r /content/file.zip /content/path_to_saved_model/
from google.colab import files
files.download("/content/file.zip")